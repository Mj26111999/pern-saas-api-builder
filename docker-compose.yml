version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pern-api-builder-db
    environment:
      POSTGRES_DB: api_builder
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - api-builder-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: pern-api-builder-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - api-builder-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pern-api-builder-backend
    environment:
      NODE_ENV: development
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: api_builder
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      PORT: 5000
      FRONTEND_URL: http://localhost:3000
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - api-builder-network
    restart: unless-stopped
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      args:
        REACT_APP_API_URL: http://localhost:5000
        REACT_APP_WS_URL: ws://localhost:5000
    container_name: pern-api-builder-frontend
    environment:
      REACT_APP_API_URL: http://localhost:5000
      REACT_APP_WS_URL: ws://localhost:5000
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - api-builder-network
    restart: unless-stopped
    volumes:
      - ./frontend:/app
      - /app/node_modules
    stdin_open: true
    tty: true

  # Nginx Reverse Proxy (Optional for development)
  nginx:
    image: nginx:alpine
    container_name: pern-api-builder-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - backend
    networks:
      - api-builder-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  api-builder-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16